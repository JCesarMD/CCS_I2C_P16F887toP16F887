CCS PCM C Compiler, Version 5.025, 12761               08-abr.-21 12:58

               Filename:   C:\Users\JCesarMD\Documents\CCS C Projects\I2CuC887\Comunicacion I2C 2 PIC\Programa PIC Master\Pic Master I2C.lst

               ROM used:   196 words (2%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           9 (2%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   04E
0003:  NOP
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                    COMUNICACIÓN I2C ENTRE DOS PIC                          // 
.................... //                                                                            // 
.................... //                      Aplicación para PIC MAESTRO                           // 
.................... //                                                                            // 
.................... //          El PIC maestro lee tres botones y estos activan tres led          // 
.................... //                   respectivamente provenientes del esclavo                 // 
.................... //             y envía el dato de tres botones al PIC esclavo via I2C         // 
.................... //                  que lo mostrará en tres leds respectivamente.             // 
.................... //                                                                            // 
.................... //                          Desarrollo de JCesarMD                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
....................  
.................... #fuses XT,PUT,NOPROTECT,BROWNOUT,NOLVP,NOWDT 
.................... #use delay (clock=4000000)                       
*
0037:  MOVLW  23
0038:  MOVWF  04
0039:  BCF    03.7
003A:  MOVF   00,W
003B:  BTFSC  03.2
003C:  GOTO   04B
003D:  MOVLW  01
003E:  MOVWF  78
003F:  CLRF   77
0040:  DECFSZ 77,F
0041:  GOTO   040
0042:  DECFSZ 78,F
0043:  GOTO   03F
0044:  MOVLW  4A
0045:  MOVWF  77
0046:  DECFSZ 77,F
0047:  GOTO   046
0048:  GOTO   049
0049:  DECFSZ 00,F
004A:  GOTO   03D
004B:  BCF    0A.3
004C:  BCF    0A.4
004D:  GOTO   0C2 (RETURN)
....................  
.................... #use i2c(MASTER, SDA=PIN_C4, SLOW, SCL=PIN_C3, NOFORCE_SW) 
*
0004:  BCF    14.7
0005:  BCF    0C.3
0006:  MOVF   23,W
0007:  MOVWF  13
0008:  MOVLW  02
0009:  BTFSC  14.7
000A:  GOTO   012
000B:  BTFSS  0C.3
000C:  GOTO   00B
000D:  MOVLW  00
000E:  BSF    03.5
000F:  BTFSC  11.6
0010:  MOVLW  01
0011:  BCF    03.5
0012:  MOVWF  78
0013:  RETURN
*
0025:  BCF    14.6
0026:  BSF    03.5
0027:  BSF    11.3
0028:  BTFSC  11.3
0029:  GOTO   028
002A:  BTFSC  77.0
002B:  BCF    11.5
002C:  BTFSS  77.0
002D:  BSF    11.5
002E:  BSF    11.4
002F:  BTFSC  11.4
0030:  GOTO   02F
0031:  BCF    03.5
0032:  MOVF   13,W
0033:  MOVWF  78
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   08D (RETURN)
....................  
.................... #use standard_io(b) 
.................... #use standard_io(c) 
.................... #use FIXED_IO( B_outputs=PIN_B5,PIN_B4,PIN_B3 ) // Configuración de botones 
....................  
.................... #define Led1   PIN_B3            // Configuración de Leds 
.................... #define Led2   PIN_B4 
.................... #define Led3   PIN_B5 
....................  
.................... int tecla;                       // Dato a transmitir 
.................... int8 incoming;                   // Dato de recepción 
....................     
.................... /******************************************************************************/ 
.................... /************************* Función de envío I2C *******************************/ 
....................      
.................... void envio_I2C (){ 
....................     
....................       i2c_start();         // Comienzo de la comunicación I2C ... 
*
0014:  BSF    03.5
0015:  BSF    11.0
0016:  BTFSC  11.0
0017:  GOTO   016
....................       i2c_write(0x46);     // ...con la dirección del PIC esclavo... 
0018:  MOVLW  46
0019:  BCF    03.5
001A:  MOVWF  23
001B:  CALL   004
....................       i2c_write(tecla);    // Envia dato 
001C:  MOVF   21,W
001D:  MOVWF  23
001E:  CALL   004
....................       i2c_stop();          // Finalización de la transmisión 
001F:  BSF    03.5
0020:  BSF    11.2
0021:  BTFSC  11.2
0022:  GOTO   021
0023:  BCF    03.5
0024:  RETURN
....................   } 
....................  
.................... /******************************************************************************/ 
.................... /*************************** FUNCIÓN PRINCIPAL ********************************/ 
....................  
.................... void main(){ 
*
004E:  MOVF   03,W
004F:  ANDLW  1F
0050:  MOVWF  03
0051:  MOVLW  FF
0052:  MOVWF  20
0053:  BSF    20.3
0054:  MOVF   20,W
0055:  BSF    03.5
0056:  MOVWF  07
0057:  BCF    03.5
0058:  BSF    20.4
0059:  MOVF   20,W
005A:  BSF    03.5
005B:  MOVWF  07
005C:  MOVLW  09
005D:  MOVWF  13
005E:  MOVLW  28
005F:  BCF    03.5
0060:  MOVWF  14
0061:  BSF    03.5
0062:  BSF    14.7
0063:  BCF    14.6
0064:  BSF    03.6
0065:  MOVF   09,W
0066:  ANDLW  C0
0067:  MOVWF  09
0068:  BCF    03.6
0069:  BCF    1F.4
006A:  BCF    1F.5
006B:  MOVLW  00
006C:  BSF    03.6
006D:  MOVWF  08
006E:  BCF    03.5
006F:  CLRF   07
0070:  CLRF   08
0071:  CLRF   09
0072:  BCF    03.7
....................       
....................    while (true){ 
....................    
.................... /******* Envio del dato al esclavo mediante la función envio_I2C() ************/ 
....................  
....................       if(input_state(PIN_B0) == 1){tecla=1;envio_I2C();} 
0073:  BCF    03.6
0074:  BTFSS  06.0
0075:  GOTO   079
0076:  MOVLW  01
0077:  MOVWF  21
0078:  CALL   014
....................       if(input_state(PIN_B1) == 1){tecla=2;envio_I2C();} 
0079:  BTFSS  06.1
007A:  GOTO   07E
007B:  MOVLW  02
007C:  MOVWF  21
007D:  CALL   014
....................       if(input_state(PIN_B2) == 1){tecla=3;envio_I2C();} 
007E:  BTFSS  06.2
007F:  GOTO   083
0080:  MOVLW  03
0081:  MOVWF  21
0082:  CALL   014
....................        
.................... /******************************************************************************/ 
....................       i2c_start();               // Inicia modulo I2C 
0083:  BSF    03.5
0084:  BSF    11.0
0085:  BTFSC  11.0
0086:  GOTO   085
....................       i2c_write(0x47);           // Dirección de esclavo con instrucción de ...  
0087:  MOVLW  47
0088:  BCF    03.5
0089:  MOVWF  23
008A:  CALL   004
....................                                  // ...lectura esclavo + 1 
....................     
.................... /***** Lectura de datos proveniente del esclavo con la función i2c_read(0) ****/ 
....................  
....................       incoming = i2c_read(0);         // Obtiene el estado base I2C 
008B:  CLRF   77
008C:  GOTO   025
008D:  MOVF   78,W
008E:  MOVWF  22
....................       i2c_stop();                     // Detiene modulo I2C 
008F:  BSF    03.5
0090:  BSF    11.2
0091:  BTFSC  11.2
0092:  GOTO   091
....................         
.................... /*************** Despliegue de datos de llegada en Leds ***********************/ 
....................  
....................        if (incoming==1){output_high(Led1);}else{output_low(Led1);} 
0093:  BCF    03.5
0094:  DECFSZ 22,W
0095:  GOTO   09C
0096:  MOVLW  C7
0097:  BSF    03.5
0098:  MOVWF  06
0099:  BCF    03.5
009A:  BSF    06.3
009B:  GOTO   0A1
009C:  MOVLW  C7
009D:  BSF    03.5
009E:  MOVWF  06
009F:  BCF    03.5
00A0:  BCF    06.3
....................        if (incoming==2){output_high(Led2);}else{output_low(Led2);} 
00A1:  MOVF   22,W
00A2:  SUBLW  02
00A3:  BTFSS  03.2
00A4:  GOTO   0AB
00A5:  MOVLW  C7
00A6:  BSF    03.5
00A7:  MOVWF  06
00A8:  BCF    03.5
00A9:  BSF    06.4
00AA:  GOTO   0B0
00AB:  MOVLW  C7
00AC:  BSF    03.5
00AD:  MOVWF  06
00AE:  BCF    03.5
00AF:  BCF    06.4
....................        if (incoming==3){output_high(Led3);}else{output_low(Led3);} 
00B0:  MOVF   22,W
00B1:  SUBLW  03
00B2:  BTFSS  03.2
00B3:  GOTO   0BA
00B4:  MOVLW  C7
00B5:  BSF    03.5
00B6:  MOVWF  06
00B7:  BCF    03.5
00B8:  BSF    06.5
00B9:  GOTO   0BF
00BA:  MOVLW  C7
00BB:  BSF    03.5
00BC:  MOVWF  06
00BD:  BCF    03.5
00BE:  BCF    06.5
....................        delay_ms(100); 
00BF:  MOVLW  64
00C0:  MOVWF  23
00C1:  GOTO   037
00C2:  GOTO   074
....................         
.................... /******************************************************************************/ 
....................     
....................    } 
.................... } 
....................        
00C3:  SLEEP
....................  
....................  
....................         
....................     
....................  
....................  
....................     
....................        
....................     
....................     
....................  

Configuration Fuses:
   Word  1: 2FE1   XT NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT

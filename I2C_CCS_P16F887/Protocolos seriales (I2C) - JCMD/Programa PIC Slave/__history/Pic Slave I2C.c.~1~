#include <16F887.h>

#device ADC=10
//#fuses NOWDT, HS, PUT, NOPROTECT, BROWNOUT, MCLR, NOCPD

#FUSES HS
#FUSES NOWDT      //No Watch Dog Timer
#FUSES BROWNOUT //No brownout reset
#FUSES NOLVP      //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O
#FUSES PUT


#use delay(clock=4000000)
#use standard_io(c)
#use i2c(SLAVE, SLOW, SDA=PIN_C4, SCL=PIN_C3, force_hw, address=0x46,) //4C
#use rs232(uart1, baud = 9600)                // Initialize UART module

#use FIXED_IO( B_outputs=PIN_B5,PIN_B4,PIN_B3 )
#define Potenciometro   PIN_A0
#define Boton1   PIN_B0
#define Boton2   PIN_B1
#define Boton3   PIN_B2
#define Led1   PIN_B3
#define Led2   PIN_B4
#define Led3   PIN_B5



int8 buffer;
//int8 index;

unsigned int16 a1;


#INT_SSP
void SSP_isr()
{
int8 incoming;
int8 state;
   //         i2c_start();
   //      output_high(Led1);

state = i2c_isr_state();
putc(state); 
//putc(13);                  
//putc(10); 
if(state < 0x80)     // Master is sending data 7f
  {
   incoming = i2c_read();
         if (incoming==1){output_high(Led1);}else{output_low(Led1);}
         if (incoming==2){output_high(Led2);}else{output_low(Led2);}
         if (incoming==3){output_high(Led3);}else{output_low(Led3);}
      
  }

   if((state == 0x80))                //&&(state <= 0x87))   // Master is requesting data from slave
  {
      //index = state & 7;  // Lower 3 bits of state = the index
        i2c_write(buffer);
  }

}

void main() {

   enable_interrupts(INT_SSP);
   enable_interrupts(GLOBAL);

  setup_oscillator(OSC_4MHZ);
//  setup_adc(ADC_CLOCK_DIV_8);      // Set ADC conversion time to 8Tosc
//  setup_adc_ports(PIN_A0);             // Configure RA0 (AN0) as analog
//  set_adc_channel(0);               // Select channel 0 input
  
  delay_ms(100);                    // Wait 100ms
  output_low(Led1);
  output_low(Led2);
  output_low(Led3);
  
  while (TRUE) {
   
      if(input_state(PIN_B0) == 1){buffer=1;}
      if(input_state(PIN_B1) == 1){buffer=2;}
      if(input_state(PIN_B2) == 1){buffer=3;}
      
  //    a1 = read_adc();
 /*  
         output_high(Led2);
         delay_ms(500); 
         output_low(Led2);
         delay_ms(500); 
         */
      // Recepción por comunicación I2C
      //i2c_start();
  //  if(i2c_poll()) {
    //     incoming=i2c_read();

         
    // i2c_stop();
   }
}
/*
////////////////////////////////////////////////////////////////////////////////
//                    COMUNICACIÓN I2C EN TRE DOS PIC                         //
//                                                                            //
//                      Aplicación para PIC ESCLAVO                           //
//                                                                            //
//       El PIC maestro lee teclado y envía el dato al PIC esclavo via I2C    //
//                      que lo mostrará en un lcd.                            //
//                                                                            //
//                            (c) RobotyPic                                   //
////////////////////////////////////////////////////////////////////////////////

#include <16F887.h>
#fuses XT
#use delay (clock=4000000)

#use standard_io(b)
#use standard_io(c)
#use I2C(SLAVE, SDA=PIN_C4, SCL=PIN_C3, ADDRESS=0x46)
#use FIXED_IO( B_outputs=PIN_B5,PIN_B4,PIN_B3 )
//#define use_portb_lcd TRUE
#define Led1   PIN_B3
#define Led2   PIN_B5
//#include <lcd.c>

void main() {
  output_low(Led1);
  output_low(Led2);
   
   int dato;
  // lcd_init();  
   
   while (TRUE) {
   
      // Recepción por comunicación I2C     
      if(i2c_poll()) {
         dato=i2c_read();
   //      lcd_putc(dato);                  //Muestra dato recibido por pantalla
         if (dato=='*') {output_high(Led1);}else{output_low(Led1);}   //Si es * borra la pantalla lcd
         }
         
         output_high(Led2);
         delay_ms(500); 
         output_low(Led2);
         delay_ms(500);  
         
   }
}*/
